/*
Deployment script for Test

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "Test"
:setvar DefaultFilePrefix "Test"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating database $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)] COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = ALL, DATA_FLUSH_INTERVAL_SECONDS = 900, INTERVAL_LENGTH_MINUTES = 60, MAX_PLANS_PER_QUERY = 200, CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367), MAX_STORAGE_SIZE_MB = 100) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE = OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE SCOPED CONFIGURATION SET MAXDOP = 0;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET MAXDOP = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET LEGACY_CARDINALITY_ESTIMATION = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET LEGACY_CARDINALITY_ESTIMATION = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET PARAMETER_SNIFFING = ON;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET PARAMETER_SNIFFING = PRIMARY;
        ALTER DATABASE SCOPED CONFIGURATION SET QUERY_OPTIMIZER_HOTFIXES = OFF;
        ALTER DATABASE SCOPED CONFIGURATION FOR SECONDARY SET QUERY_OPTIMIZER_HOTFIXES = PRIMARY;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET TEMPORAL_HISTORY_RETENTION ON 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating Table [dbo].[Connectors]...';


GO
CREATE TABLE [dbo].[Connectors] (
    [Id]         INT              NOT NULL,
    [StationId]  UNIQUEIDENTIFIER NOT NULL,
    [MaxCurrent] BIGINT           NOT NULL,
    PRIMARY KEY CLUSTERED ([StationId] ASC, [Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Groups]...';


GO
CREATE TABLE [dbo].[Groups] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             VARCHAR (30)     NOT NULL,
    [Capacity]         BIGINT           NOT NULL,
    [ConsumedCapacity] BIGINT           NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Table [dbo].[Stations]...';


GO
CREATE TABLE [dbo].[Stations] (
    [Id]              UNIQUEIDENTIFIER NOT NULL,
    [Name]            VARCHAR (30)     NOT NULL,
    [ConsumedCurrent] BIGINT           NOT NULL,
    [GroupId]         UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Groups]...';


GO
ALTER TABLE [dbo].[Groups]
    ADD DEFAULT 0 FOR [ConsumedCapacity];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[Stations]...';


GO
ALTER TABLE [dbo].[Stations]
    ADD DEFAULT 0 FOR [ConsumedCurrent];


GO
PRINT N'Creating Foreign Key [dbo].[FK_Connectors_Stations]...';


GO
ALTER TABLE [dbo].[Connectors]
    ADD CONSTRAINT [FK_Connectors_Stations] FOREIGN KEY ([StationId]) REFERENCES [dbo].[Stations] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Stations_Groups]...';


GO
ALTER TABLE [dbo].[Stations]
    ADD CONSTRAINT [FK_Stations_Groups] FOREIGN KEY ([GroupId]) REFERENCES [dbo].[Groups] ([Id]);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Connectors_MaxCurrent]...';


GO
ALTER TABLE [dbo].[Connectors]
    ADD CONSTRAINT [CK_Connectors_MaxCurrent] CHECK ([MaxCurrent] > 0);


GO
PRINT N'Creating Check Constraint [dbo].[CK_Groups_Column]...';


GO
ALTER TABLE [dbo].[Groups]
    ADD CONSTRAINT [CK_Groups_Column] CHECK ([Capacity] > 0);


GO
PRINT N'Creating Procedure [dbo].[usp_CreateConnector]...';


GO
CREATE PROCEDURE [dbo].[usp_CreateConnector]
     @id INT,
	 @stationId UNIQUEIDENTIFIER,
     @capacity BIGINT
AS

    BEGIN TRANSACTION;

        BEGIN TRY;

            INSERT INTO [dbo].[Connectors] 
                ([Id], [StationId], [MaxCurrent])
            VALUEs
                (@id, @stationId, @capacity)

            UPDATE 
                [dbo].[Stations]
            SET 
                [ConsumedCurrent] = [ConsumedCurrent] + @capacity
            WHERE 
                [Id] = @stationId

        END TRY
        BEGIN CATCH
            ROLLBACK TRANSACTION;
			THROW;
        END CATCH

    COMMIT TRANSACTION;
GO
PRINT N'Creating Procedure [dbo].[usp_CreateGroup]...';


GO
CREATE PROCEDURE [dbo].[usp_CreateGroup]
	 @id UNIQUEIDENTIFIER,
     @name VARCHAR(30), 
     @capacity BIGINT
AS

    INSERT INTO [dbo].[Groups] 
        ([Id], [Name], [Capacity])
    VALUEs
        (@id, @name, @capacity)
GO
PRINT N'Creating Procedure [dbo].[usp_CreateStation]...';


GO
CREATE PROCEDURE [dbo].[usp_CreateStation]
	 @id UNIQUEIDENTIFIER,
     @name VARCHAR(30), 
     @groupId UNIQUEIDENTIFIER
AS

    INSERT INTO [dbo].[Stations] 
        ([Id], [Name], [GroupId])
    VALUEs
        (@id, @name, @groupId)
GO
PRINT N'Creating Procedure [dbo].[usp_GetConnectorByIdentifier]...';


GO
CREATE PROCEDURE [dbo].[usp_GetConnectorByIdentifier]
     @id INT,
	 @stationId UNIQUEIDENTIFIER
AS

    SELECT
        [Id],
        [StationId],
        [MaxCurrent]
    FROM
        [dbo].[Connectors]
    WHERE
        [Id] = @id AND [StationId] = @stationId
GO
PRINT N'Creating Procedure [dbo].[usp_GetGroupById]...';


GO
CREATE PROCEDURE [dbo].[usp_GetGroupById]
	@id UNIQUEIDENTIFIER
AS
	SELECT 
		[Id],
		[Name],
		[Capacity],
		[ConsumedCapacity]
	FROM
		[dbo].[Groups]
	WHERE 
		[Id] = @id
GO
PRINT N'Creating Procedure [dbo].[usp_GetStationById]...';


GO
CREATE PROCEDURE [dbo].[usp_GetStationById]
	@id UNIQUEIDENTIFIER
AS
	SELECT 
		[Id],
		[Name],
		[GroupId],
		[ConsumedCurrent]
	FROM
		[dbo].[Stations]
	WHERE 
		[Id] = @id
GO
PRINT N'Creating Procedure [dbo].[usp_GetStationConnectorsCount]...';


GO
CREATE PROCEDURE [dbo].[usp_GetStationConnectorsCount]
	 @stationId UNIQUEIDENTIFIER
AS

	SELECT 
		COUNT(*)
	FROM
		[dbo].[Connectors]
	WHERE
		[StationId] = @stationId
GO
PRINT N'Creating Procedure [dbo].[usp_RemoveGroup]...';


GO
CREATE PROCEDURE [dbo].[usp_RemoveGroup]
	 @id UNIQUEIDENTIFIER
AS
	BEGIN TRANSACTION;

		BEGIN TRY;

			DELETE FROM [dbo].[Connectors]
			WHERE
				[StationId] IN (
					SELECT
						[Id]
					FROM 
						[dbo].[Stations]
					WHERE 
						[GroupId] = @id
				);

			DELETE FROM [dbo].[Stations]
			WHERE
				[GroupId] = @id

			DELETE FROM [dbo].[Groups]
			WHERE
				[Id] = @id

		END TRY
		BEGIN CATCH
			ROLLBACK TRANSACTION;
			THROW;
		END CATCH

	COMMIT TRANSACTION;
GO
PRINT N'Creating Procedure [dbo].[usp_RemoveStation]...';


GO
CREATE PROCEDURE [dbo].[usp_RemoveStation]
	 @id UNIQUEIDENTIFIER
AS

    BEGIN TRANSACTION;

        BEGIN TRY;

            UPDATE 
                [dbo].[Groups]
            SET 
                [ConsumedCapacity] = [ConsumedCapacity] - (
                    SELECT 
                        [ConsumedCurrent]
                    FROM 
                        [dbo].[Stations]
                        WHERE 
                            [Id] = @id)

            DELETE FROM [dbo].[Stations]
            WHERE 
                [Id] = @id

      END TRY
      BEGIN CATCH;
      	ROLLBACK TRANSACTION;
		THROW;
      END CATCH
     
   COMMIT TRANSACTION
GO
PRINT N'Creating Procedure [dbo].[usp_UpdateConnectorCurrent]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateConnectorCurrent]
     @id INT,
	 @stationId UNIQUEIDENTIFIER,
     @newCurrent BIGINT
AS

    BEGIN TRANSACTION;

        BEGIN TRY;

             UPDATE 
                [dbo].[Stations]
            SET 
                [ConsumedCurrent] = [ConsumedCurrent] - (SELECT [MaxCurrent]
                FROM [dbo].[Connectors]
                WHERE [Id] = @id AND [StationId] = @stationId) + @newCurrent
            WHERE 
                [Id] = @stationId

            UPDATE
                [dbo].[Connectors]
            SET
                [MaxCurrent] = @newCurrent
            WHERE 
                [Id] = @id AND [StationId] = @stationId

        END TRY
        BEGIN CATCH
        	ROLLBACK TRANSACTION;
			THROW;
        END CATCH

    COMMIT TRANSACTION;
GO
PRINT N'Creating Procedure [dbo].[usp_UpdateGroup]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateGroup]
	 @id UNIQUEIDENTIFIER,
     @name VARCHAR(30), 
     @capacity BIGINT
AS
    UPDATE  
        [dbo].[Groups]
    SET
        [Name] = @name, [Capacity] = @capacity
    WHERE
        [Id] = @id
GO
PRINT N'Creating Procedure [dbo].[usp_UpdateStation]...';


GO
CREATE PROCEDURE [dbo].[usp_UpdateStation]
	 @id UNIQUEIDENTIFIER,
     @name VARCHAR(30), 
     @groupId UNIQUEIDENTIFIER

    AS
    UPDATE  
        [dbo].[Stations]
    SET
        [Name] = @name, [GroupId] = @groupId
    WHERE
        [Id] = @id


    DECLARE @oldStationGroup UNIQUEIDENTIFIER;

    SELECT @oldStationGroup = [GroupId]
        FROM 
            [dbo].[Stations]
        WHERE
            [Id] = @id

    IF @groupId != @oldStationGroup
        BEGIN
            UPDATE 
                [dbo].[Groups]
            SET 
                [ConsumedCapacity] = [ConsumedCapacity] + (
                    SELECT 
                        [ConsumedCurrent]
                    FROM 
                        [dbo].[Stations]
                     WHERE 
                        [Id] = @id)

           UPDATE 
                [dbo].[Groups]
            SET 
                [ConsumedCapacity] = [ConsumedCapacity] - (
                    SELECT 
                        [ConsumedCurrent]
                    FROM 
                        [dbo].[Stations]
                     WHERE 
                        [Id] = @oldStationGroup)
        END
GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
